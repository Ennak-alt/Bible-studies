// Original version
// void reverse(char s[]) {
//     int i = 0;
//     char cp[MAXLINE];
//     while (s[i] != '\0') {
//         cp[i] = s[i];
//         ++i;
//     }
//     --i;
//     for (int j = 0; i >= 0; ++j, --i) {
//         s[j] = cp[i];
//     }
// }

// Original version
// int strrindex(char s[], char t[]) {
//   int ls = strlen(s);
//   int lt = strlen(t);
//   for (int i = ls-lt; i >= 0; i--) {
//     int j;
//     for (j = 0; j < lt; j++)
//       if (s[i+j] != t[j]) 
//         break;
//     if (j == lt) 
//       return i;
//   }
//   return -1;
// }

// Original version
// int getLine(char s[], int lim) {
//     int c, i;
//     for (i=0; i<lim-1 && (c=getchar())!=EOF && c!='\n'; ++i) 
//         s[i] = c;
//     if (c == '\n') {
//         s[i] = c;
//         ++i;
//     }
//     s[i] = '\0';
//     return i;
// }

// Original version
// double atof(char s[]) {
//   double val, power;
//   int i, sign;

//   for (i = 0; isspace(s[i]); i++) 
//     ;
//   sign = (s[i] == '-') ? -1 : 1;
//   if (s[i] == '+' || s[i] == '-') 
//     i++;
//   for (val = 0.0; isdigit(s[i]); i++)
//     val = 10.0 * val + (s[i] - '0');
//   if (s[i] == '.')
//     i++;
//   for (power = 1.0; isdigit(s[i]); i++) {
//     val = 10.0 * val + (s[i] - '0');
//     power *= 10.0;
//   }

//   if (tolower(s[i++]) == 'e') {
//     double exsign = s[i] == '-' ? i++, 0.1: 10;
//     int exval = 0.0;
//     for (;s[i] != '\0'; i++)
//       exval = 10 * exval + (s[i] - '0');
//     power /= powf(exsign, exval);
//   }

//   return sign * val / power;
// }

// Original version
// void newitoa(int n, char s[]) {
//   int i, sign;
//   char l;
  
//   i = 0;

//   if ((sign = n) < 0) {
//     s[0] = (char)(-(n - (n/10)*10) + '0');
//     i++;
//     n = -(n / 10);
//   }

//   do {
//     s[i++] = n % 10 + '0';
//   } while ((n /= 10) > 0);
//   if (sign < 0) {
//     s[i++] = '-';
//   }
//   s[++i] = '\0';
//   reverse(s);
// }